


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Runs on LM4F120 or TM4C123
    3 00000000         ; EE319K lab 7 device driver for any LCD
    4 00000000         ;
    5 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    6 00000000         ; This driver assumes two low-level LCD functions
    7 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
    8 00000000         ; ST7735_OutString outputs a null-terminated string 
    9 00000000         
   10 00000000                 IMPORT           ST7735_OutChar
   11 00000000                 IMPORT           ST7735_OutString
   12 00000000                 EXPORT           LCD_OutDec
   13 00000000                 EXPORT           LCD_OutFix
   14 00000000         
   15 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   16 00000000         
   17 00000000         ; Error message (null-terminated string)
   18 00000000 2A 2E 2A 
              2A 2A 00 ErrorString
                               DCB              "*.***", 0
   19 00000006         
   20 00000006                 THUMB
   21 00000006         
   22 00000006         ; bypass 8 byte alignment on the stack
   23 00000006         ; allows an odd number of register pushes and pops
   24 00000006                 PRESERVE8
   25 00000006         
   26 00000006         
   27 00000006         ;-----------------------extractChar---------------------
                       ---------------------
   28 00000006         ; Extract a single character from the ASCII representati
                       on of an integer, and
   29 00000006         ; save onto a stack with stack pointer R1.
   30 00000006         ; Inputs: 
   31 00000006         ;   R0 - 32-bit unsigned number
   32 00000006         ;   R1 - stack pointer to allocated stack
   33 00000006         ; Output: R0 / 10
   34 00000006         ; Modifies: R1 (stack pointer)
   35 00000006         ;-------------------------------------------------------
                       ---------------------
   36 00000006         extractChar
   37 00000006 B51C            PUSH             {R2-R4, LR}
   38 00000008         
   39 00000008 F04F 030A       MOV              R3, #10
   40 0000000C         ; R0/10 -> R4
   41 0000000C 4604            MOV              R4, R0
   42 0000000E FBB4 F4F3       UDIV             R4, R3
   43 00000012         ; R4*10 -> R2
   44 00000012 4622            MOV              R2, R4
   45 00000014 FB02 F203       MUL              R2, R3
   46 00000018         ; R0 - (R0/10*10) -> R0 (R0 = R0 % 10)
   47 00000018 EBA0 0002       SUB              R0, R0, R2
   48 0000001C         
   49 0000001C         ; Push ASCII character to stack R1
   50 0000001C F100 0030       ADD              R0, R0, #0x30
   51 00000020 F1A1 0101       SUB              R1, #1



ARM Macro Assembler    Page 2 


   52 00000024 7008            STRB             R0, [R1]
   53 00000026         
   54 00000026         ; Return
   55 00000026 4620            MOV              R0, R4
   56 00000028 E8BD 401C       POP              {R2-R4, LR}
   57 0000002C 4770            BX               LR
   58 0000002E         
   59 0000002E         
   60 0000002E         ;-----------------------displayPrint--------------------
                       ---------------------
   61 0000002E         ; Display a null-terminated string on the display
   62 0000002E         ; Input: R0 - pointer to string
   63 0000002E         ; Output: none
   64 0000002E         ;-------------------------------------------------------
                       ---------------------
   65 0000002E         displayPrint
   66 0000002E B510            PUSH             {R4, LR}
   67 00000030 4604            MOV              R4, R0
   68 00000032         displayPrintLoop
   69 00000032         ; Pop value off the stack
   70 00000032 7820            LDRB             R0, [R4]
   71 00000034 F104 0401       ADD              R4, R4, #1
   72 00000038         ; Exit if null termination is reached
   73 00000038 2800            CMP              R0, #0
   74 0000003A D002            BEQ              displayPrintExit
   75 0000003C         ; Display character
   76 0000003C F7FF FFFE       BL               ST7735_OutChar
   77 00000040 E7F7            B                displayPrintLoop
   78 00000042         
   79 00000042         displayPrintExit
   80 00000042         
   81 00000042 E8BD 4010       POP              {R4, LR}
   82 00000046 4770            BX               LR
   83 00000048         
   84 00000048         
   85 00000048         ;-----------------------LCD_OutDec----------------------
                       -
   86 00000048         ; Output a 32-bit number in unsigned decimal format
   87 00000048         ; Input: R0 (call by value) 32-bit unsigned number
   88 00000048         ; Output: none
   89 00000048         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   90 00000048         
   91 00000048         ; Local variable binding phase
   92 00000048 FFFFFFF0 
                       outDec_CurrentValue
                               EQU              -16         ; Storage for the c
                                                            urrent value on the
                                                             stack because the 
                                                            lab said so
   93 00000048         
   94 00000048         LCD_OutDec
   95 00000048         
   96 00000048 E92D 4806       PUSH             {LR, R1, R2, R11}
   97 0000004C         
   98 0000004C         ; Allocate 20 bytes of data on the stack
   99 0000004C         ; R1 contains the secondary stack pointer; R11 contains 
                       the frame pointer
  100 0000004C 46EB            MOV              R11, SP



ARM Macro Assembler    Page 3 


  101 0000004E 4669            MOV              R1, SP
  102 00000050 B085            SUB              SP, #20
  103 00000052 F84B 0C10       STR              R0, [R11, #outDec_CurrentValue]
  104 00000056         
  105 00000056         ; Add null termination to string buffer
  106 00000056 F1A1 0101       SUB              R1, #1
  107 0000005A F04F 0200       MOV              R2, #0x00
  108 0000005E 600A            STR              R2, [R1]
  109 00000060         
  110 00000060         ; Extract characters from R0 until R0=0.
  111 00000060         LCD_OutDec_Loop
  112 00000060 F85B 0C10       LDR              R0, [R11, #outDec_CurrentValue]
  113 00000064 F7FF FFCF       BL               extractChar
  114 00000068 F84B 0C10       STR              R0, [R11, #outDec_CurrentValue]
  115 0000006C 2800            CMP              R0, #0
  116 0000006E D1F7            BNE              LCD_OutDec_Loop
  117 00000070         
  118 00000070         ; Print the resulting string
  119 00000070 4608            MOV              R0, R1
  120 00000072 F7FF FFDC       BL               displayPrint
  121 00000076         
  122 00000076         ; Restore SP, other registers
  123 00000076 B005            ADD              SP, #20
  124 00000078 E8BD 4806       POP{LR,          R1, R2, R11}
  125 0000007C         
  126 0000007C 4770            BX               LR
  127 0000007E         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
  128 0000007E         
  129 0000007E         
  130 0000007E         ; -----------------------LCD _OutFix--------------------
                       --
  131 0000007E         ; Output characters to LCD display in fixed-point format
                       
  132 0000007E         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
  133 0000007E         ; Inputs:  R0 is an unsigned 32-bit number
  134 0000007E         ; Outputs: none
  135 0000007E         ; E.g., R0=0,    then output "0.000 "
  136 0000007E         ;       R0=3,    then output "0.003 "
  137 0000007E         ;       R0=89,   then output "0.089 "
  138 0000007E         ;       R0=123,  then output "0.123 "
  139 0000007E         ;       R0=9999, then output "9.999 "
  140 0000007E         ;       R0>9999, then output "*.*** "
  141 0000007E         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  142 0000007E         
  143 0000007E         ; Local variable binding phase
  144 0000007E FFFFFFF0 
                       outFix_CurrentValue
                               EQU              -16         ; Storage for the c
                                                            urrent value on the
                                                             stack because the 
                                                            lab said so
  145 0000007E         
  146 0000007E         LCD_OutFix
  147 0000007E E92D 481E       PUSH             {LR, R1-R4, R11}
  148 00000082         
  149 00000082         ; Allocate 20 bytes of data on the stack
  150 00000082         ; R1 contains the secondary stack pointer; R11 contains 



ARM Macro Assembler    Page 4 


                       the frame pointer
  151 00000082 46EB            MOV              R11, SP
  152 00000084 4669            MOV              R1, SP
  153 00000086 B085            SUB              SP, #20
  154 00000088 F84B 0C10       STR              R0, [R11, #outFix_CurrentValue]
  155 0000008C         
  156 0000008C         ; Add null termination to string buffer
  157 0000008C F1A1 0101       SUB              R1, #1
  158 00000090 F04F 0200       MOV              R2, #0x00
  159 00000094 600A            STR              R2, [R1]
  160 00000096         
  161 00000096         ; Ensure that R0<9999
  162 00000096 F242 720F       MOV              R2, #9999
  163 0000009A 4290            CMP              R0, R2
  164 0000009C BF84            ITT              HI
  165 0000009E 490D            LDRHI            R1, =ErrorString
  166 000000A0 E010            BHI              LCD_OutFix_Print
  167 000000A2         
  168 000000A2         ; Extract 4 characters from R0
  169 000000A2 F04F 0400       MOV              R4, #0x00
  170 000000A6         
  171 000000A6         LCD_OutFix_Loop
  172 000000A6 F85B 0C10       LDR              R0, [R11, #outFix_CurrentValue]
  173 000000AA F7FF FFAC       BL               extractChar
  174 000000AE F84B 0C10       STR              R0, [R11, #outFix_CurrentValue]
  175 000000B2         ; Add decimal point
  176 000000B2 2C02            CMP              R4, #0x02
  177 000000B4 BF02            ITTT             EQ
  178 000000B6 232E            MOVEQ            R3, #0x2E
  179 000000B8 3901            SUBEQ            R1, #1
  180 000000BA 700B            STRBEQ           R3, [R1]
  181 000000BC         ; Check to see if enough characters have been extracted
  182 000000BC F104 0401       ADD              R4, R4, #1
  183 000000C0 2C04            CMP              R4, #0x04
  184 000000C2 D1F0            BNE              LCD_OutFix_Loop
  185 000000C4         
  186 000000C4         ; Print the resulting string
  187 000000C4         LCD_OutFix_Print
  188 000000C4 4608            MOV              R0, R1
  189 000000C6 F7FF FFB2       BL               displayPrint
  190 000000CA         
  191 000000CA         ; Restore SP, other registers
  192 000000CA B005            ADD              SP, #20
  193 000000CC E8BD 481E       POP{LR,          R1-R4, R11}
  194 000000D0 4770            BX               LR
  195 000000D2         
  196 000000D2 00 00           ALIGN
  197 000000D4         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  198 000000D4         
  199 000000D4                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  200 000000D4                 END                          ; end of file
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 15 in file Print.s
   Uses
      None
Comment: .text unused
ErrorString 00000000

Symbol: ErrorString
   Definitions
      At line 18 in file Print.s
   Uses
      At line 165 in file Print.s
Comment: ErrorString used once
LCD_OutDec 00000048

Symbol: LCD_OutDec
   Definitions
      At line 94 in file Print.s
   Uses
      At line 12 in file Print.s
Comment: LCD_OutDec used once
LCD_OutDec_Loop 00000060

Symbol: LCD_OutDec_Loop
   Definitions
      At line 111 in file Print.s
   Uses
      At line 116 in file Print.s
Comment: LCD_OutDec_Loop used once
LCD_OutFix 0000007E

Symbol: LCD_OutFix
   Definitions
      At line 146 in file Print.s
   Uses
      At line 13 in file Print.s
Comment: LCD_OutFix used once
LCD_OutFix_Loop 000000A6

Symbol: LCD_OutFix_Loop
   Definitions
      At line 171 in file Print.s
   Uses
      At line 184 in file Print.s
Comment: LCD_OutFix_Loop used once
LCD_OutFix_Print 000000C4

Symbol: LCD_OutFix_Print
   Definitions
      At line 187 in file Print.s
   Uses
      At line 166 in file Print.s
Comment: LCD_OutFix_Print used once
displayPrint 0000002E

Symbol: displayPrint



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 65 in file Print.s
   Uses
      At line 120 in file Print.s
      At line 189 in file Print.s

displayPrintExit 00000042

Symbol: displayPrintExit
   Definitions
      At line 79 in file Print.s
   Uses
      At line 74 in file Print.s
Comment: displayPrintExit used once
displayPrintLoop 00000032

Symbol: displayPrintLoop
   Definitions
      At line 68 in file Print.s
   Uses
      At line 77 in file Print.s
Comment: displayPrintLoop used once
extractChar 00000006

Symbol: extractChar
   Definitions
      At line 36 in file Print.s
   Uses
      At line 113 in file Print.s
      At line 173 in file Print.s

11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

outDec_CurrentValue FFFFFFF0

Symbol: outDec_CurrentValue
   Definitions
      At line 92 in file Print.s
   Uses
      At line 103 in file Print.s
      At line 112 in file Print.s
      At line 114 in file Print.s

outFix_CurrentValue FFFFFFF0

Symbol: outFix_CurrentValue
   Definitions
      At line 144 in file Print.s
   Uses
      At line 154 in file Print.s
      At line 172 in file Print.s
      At line 174 in file Print.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 10 in file Print.s
   Uses
      At line 76 in file Print.s
Comment: ST7735_OutChar used once
ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 11 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
348 symbols in table
