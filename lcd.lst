


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: Tianshu Huang and Erick Li
    3 00000000         ; Last modification date: 3/25/2018
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 40004100 
                       DC      EQU              0x40004100
   23 00000000 00000000 
                       DC_COMMAND
                               EQU              0
   24 00000000 00000040 
                       DC_DATA EQU              0x40
   25 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   26 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   27 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   28 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   29 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   30 00000000         
   31 00000000                 EXPORT           writecommand
   32 00000000                 EXPORT           writedata
   33 00000000         
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000                 THUMB
   36 00000000                 ALIGN
   37 00000000         
   38 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   39 00000000         ; sent.  The SSI module has hardware input and output FI



ARM Macro Assembler    Page 2 


                       FOs
   40 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   41 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   42 00000000         ; lot of data, the FIFOs are not used when writing
   43 00000000         ; commands, and they are used when writing data.  This
   44 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   45 00000000         ; that is actually being transmitted.
   46 00000000         ; The write command operation waits until all data has b
                       een
   47 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   48 00000000         ; the command, and then waits for the transmission to
   49 00000000         ; finish.
   50 00000000         ; The write data operation waits until there is room in 
                       the
   51 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   52 00000000         ; and then adds the data to the transmit FIFO.
   53 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   54 00000000         ; the SSI0 module is not initialized and enabled.
   55 00000000         
   56 00000000         
   57 00000000         ;*******************************************************
                       ****************
   58 00000000         ; This is a helper that busy-waits until the LCD is no l
                       onger busy.
   59 00000000         ; Input: None
   60 00000000         ; Output: None
   61 00000000         ;*******************************************************
                       ****************
   62 00000000         waitUntilAvailable
   63 00000000 B403            PUSH             {R0, R1}
   64 00000002         
   65 00000002 4911            LDR              R1, =SSI0_SR_R
   66 00000004         ; Check if bit 4 is set, and loop back if it is
   67 00000004         waitLoop
   68 00000004 6808            LDR              R0, [R1]
   69 00000006 F010 0010       ANDS             R0, #0x10
   70 0000000A D1FB            BNE              waitLoop
   71 0000000C         
   72 0000000C BC03            POP              {R0, R1}
   73 0000000E 4770            BX               LR
   74 00000010         
   75 00000010         
   76 00000010         ;*******************************************************
                       ****************
   77 00000010         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   78 00000010         ; Input: R0  8-bit command to transmit
   79 00000010         ; Output: none
   80 00000010         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   81 00000010         ;*******************************************************
                       ****************
   82 00000010         writecommand



ARM Macro Assembler    Page 3 


   83 00000010         ;; --UUU-- Code to write a command to the LCD
   84 00000010         ;1) Read SSI0_SR_R and check bit 4, 
   85 00000010         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   86 00000010         ;3) Clear D/C=PA6 to zero
   87 00000010         ;4) Write the command to SSI0_DR_R
   88 00000010         ;5) Read SSI0_SR_R and check bit 4, 
   89 00000010         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   90 00000010         
   91 00000010         ; save registers
   92 00000010 B50E            PUSH             {R1-R3, LR}
   93 00000012         
   94 00000012 F7FF FFF5       BL               waitUntilAvailable
   95 00000016         
   96 00000016         ; set DC to 0 to send command to LCD
   97 00000016 490D            LDR              R1, =DC
   98 00000018 F04F 0200       LDR              R2, =DC_COMMAND
   99 0000001C 600A            STR              R2, [R1]
  100 0000001E         
  101 0000001E         ; write command given in R0 to SSIO_DR_R
  102 0000001E 490C            LDR              R1, =SSI0_DR_R
  103 00000020 6008            STR              R0, [R1]
  104 00000022         
  105 00000022 F7FF FFED       BL               waitUntilAvailable
  106 00000026         
  107 00000026         ; restore and return 
  108 00000026 E8BD 400E       POP              {R1-R3, LR}
  109 0000002A 4770            BX               LR
  110 0000002C         
  111 0000002C         
  112 0000002C         ;*******************************************************
                       ****************
  113 0000002C         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
  114 0000002C         ; Input: R0  8-bit data to transmit
  115 0000002C         ; Output: none
  116 0000002C         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
  117 0000002C         ;*******************************************************
                       ****************
  118 0000002C         writedata
  119 0000002C         ;; --UUU-- Code to write data to the LCD
  120 0000002C         ;1) Read SSI0_SR_R and check bit 1, 
  121 0000002C         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
  122 0000002C         ;3) Set D/C=PA6 to one
  123 0000002C         ;4) Write the 8-bit data to SSI0_DR_R
  124 0000002C         
  125 0000002C         ; save registers
  126 0000002C B406            PUSH             {R1, R2}
  127 0000002E         
  128 0000002E 4A06            LDR              R2, =SSI0_SR_R
  129 00000030         ; loop if LCD is busy 
  130 00000030         databusy
  131 00000030 6811            LDR              R1, [R2]
  132 00000032         ; isolate bit 1 of SSIO_SR_R
  133 00000032 F011 0102       ANDS             R1, #0x02
  134 00000036 D0FB            BEQ              databusy



ARM Macro Assembler    Page 4 


  135 00000038         
  136 00000038         ; set PA6 to 1 to send data to LCD
  137 00000038 4904            LDR              R1, =DC
  138 0000003A F04F 0240       LDR              R2, =DC_DATA
  139 0000003E 600A            STR              R2, [R1]
  140 00000040         
  141 00000040         ; write data given in R0 to SSIO_DR_R
  142 00000040 4903            LDR              R1, =SSI0_DR_R
  143 00000042 6008            STR              R0, [R1]
  144 00000044         
  145 00000044         ; restore and return
  146 00000044 BC06            POP              {R1, R2}
  147 00000046 4770            BX               LR
  148 00000048         
  149 00000048         
  150 00000048         ;***************************************************
  151 00000048         ; This is a library for the Adafruit 1.8" SPI display.
  152 00000048         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  153 00000048         ; ----> http://www.adafruit.com/products/358
  154 00000048         ; as well as Adafruit raw 1.8" TFT display
  155 00000048         ; ----> http://www.adafruit.com/products/618
  156 00000048         ;
  157 00000048         ; Check out the links above for our tutorials and wiring
                        diagrams
  158 00000048         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  159 00000048         ; interface (RST is optional)
  160 00000048         ; Adafruit invests time and resources providing this ope
                       n source code,
  161 00000048         ; please support Adafruit and open-source hardware by pu
                       rchasing
  162 00000048         ; products from Adafruit!
  163 00000048         ;
  164 00000048         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  165 00000048         ; MIT license, all text above must be included in any re
                       distribution
  166 00000048         ;****************************************************
  167 00000048         
  168 00000048         
  169 00000048                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  170 00000048                 END                          ; end of file
              4000800C 
              40004100 
              40008008 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lcd.d 
-o.\lcd.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Luminary --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 34 in file LCD.s
   Uses
      None
Comment: .text unused
databusy 00000030

Symbol: databusy
   Definitions
      At line 130 in file LCD.s
   Uses
      At line 134 in file LCD.s
Comment: databusy used once
waitLoop 00000004

Symbol: waitLoop
   Definitions
      At line 67 in file LCD.s
   Uses
      At line 70 in file LCD.s
Comment: waitLoop used once
waitUntilAvailable 00000000

Symbol: waitUntilAvailable
   Definitions
      At line 62 in file LCD.s
   Uses
      At line 94 in file LCD.s
      At line 105 in file LCD.s

writecommand 00000010

Symbol: writecommand
   Definitions
      At line 82 in file LCD.s
   Uses
      At line 31 in file LCD.s
Comment: writecommand used once
writedata 0000002C

Symbol: writedata
   Definitions
      At line 118 in file LCD.s
   Uses
      At line 32 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 22 in file LCD.s
   Uses
      At line 97 in file LCD.s
      At line 137 in file LCD.s

DC_COMMAND 00000000

Symbol: DC_COMMAND
   Definitions
      At line 23 in file LCD.s
   Uses
      At line 98 in file LCD.s
Comment: DC_COMMAND used once
DC_DATA 00000040

Symbol: DC_DATA
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 138 in file LCD.s
Comment: DC_DATA used once
SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 25 in file LCD.s
   Uses
      At line 102 in file LCD.s
      At line 142 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 26 in file LCD.s
   Uses
      At line 65 in file LCD.s
      At line 128 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 28 in file LCD.s
   Uses
      None
Comment: SSI_SR_BSY unused
SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE
   Definitions
      At line 27 in file LCD.s
   Uses
      None
Comment: SSI_SR_RNE unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 29 in file LCD.s
   Uses
      None
Comment: SSI_SR_TNF unused
8 symbols
346 symbols in table
